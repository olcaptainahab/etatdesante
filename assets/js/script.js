// Fonction pour obtenir le th√®me actuel depuis localStorage ou utiliser la valeur par d√©faut
const getStoredTheme = () => localStorage.getItem('theme') || 'dark';

const themeToggleButton = document.getElementById('theme-toggle');
const body = document.body;

// Fonction pour mettre √† jour le th√®me dans l'iframe de contenu
const updateContentFrameTheme = (theme) => {
    try {
        const contentFrame = window.parent.document.getElementById('content-frame');
        if (contentFrame) {
            const contentDocument = contentFrame.contentDocument || contentFrame.contentWindow.document;
            const contentBody = contentDocument.body;
            contentBody.setAttribute('data-theme', theme);
        }
    } catch (e) {
        console.error('Erreur lors de la mise √† jour du th√®me:', e);
    }
};

// Initialiser le th√®me au chargement
const currentTheme = getStoredTheme();
body.setAttribute('data-theme', currentTheme);
themeToggleButton.textContent = currentTheme === 'dark' ? '‚òÄÔ∏è Th√®me clair' : 'üåô Th√®me sombre';

themeToggleButton.addEventListener('click', () => {
    const isDark = body.getAttribute('data-theme') === 'dark';
    const newTheme = isDark ? 'light' : 'dark';
    
    // Sauvegarder le th√®me dans localStorage
    localStorage.setItem('theme', newTheme);
    
    // Mettre √† jour le th√®me dans la navigation
    body.setAttribute('data-theme', newTheme);
    
    // Mettre √† jour le th√®me dans l'iframe de contenu
    updateContentFrameTheme(newTheme);
    
    // Mettre √† jour le texte du bouton
    themeToggleButton.textContent = isDark ? 'üåô Th√®me sombre' : '‚òÄÔ∏è Th√®me clair';
});